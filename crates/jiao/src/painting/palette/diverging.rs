// Copyright (c) 2022 Xu Shaohua <shaohua@biofan.org>. All rights reserved.
// Use of this source is governed by General Public License that can be found
// in the LICENSE file.

#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use crate::painting::Color;

const BrBG_COLORS: &[Color] = &[
    Color::from_rgb(0xd8, 0xb3, 0x65),
    Color::from_rgb(0xf5, 0xf5, 0xf5),
    Color::from_rgb(0x5a, 0xb4, 0xac),
    Color::from_rgb(0xa6, 0x61, 0x1a),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x01, 0x85, 0x71),
    Color::from_rgb(0xa6, 0x61, 0x1a),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0xf5, 0xf5, 0xf5),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x01, 0x85, 0x71),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xd8, 0xb3, 0x65),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x5a, 0xb4, 0xac),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xd8, 0xb3, 0x65),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xf5, 0xf5, 0xf5),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x5a, 0xb4, 0xac),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xbf, 0x81, 0x2d),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x35, 0x97, 0x8f),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xbf, 0x81, 0x2d),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xf5, 0xf5, 0xf5),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x35, 0x97, 0x8f),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x54, 0x30, 0x05),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xbf, 0x81, 0x2d),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x35, 0x97, 0x8f),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x00, 0x3c, 0x30),
    Color::from_rgb(0x54, 0x30, 0x05),
    Color::from_rgb(0x8c, 0x51, 0x0a),
    Color::from_rgb(0xbf, 0x81, 0x2d),
    Color::from_rgb(0xdf, 0xc2, 0x7d),
    Color::from_rgb(0xf6, 0xe8, 0xc3),
    Color::from_rgb(0xf5, 0xf5, 0xf5),
    Color::from_rgb(0xc7, 0xea, 0xe5),
    Color::from_rgb(0x80, 0xcd, 0xc1),
    Color::from_rgb(0x35, 0x97, 0x8f),
    Color::from_rgb(0x01, 0x66, 0x5e),
    Color::from_rgb(0x00, 0x3c, 0x30),
];

const PiYG_COLORS: &[Color] = &[
    Color::from_rgb(0xe9, 0xa3, 0xc9),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xa1, 0xd7, 0x6a),
    Color::from_rgb(0xd0, 0x1c, 0x8b),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x4d, 0xac, 0x26),
    Color::from_rgb(0xd0, 0x1c, 0x8b),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x4d, 0xac, 0x26),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xe9, 0xa3, 0xc9),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xa1, 0xd7, 0x6a),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xe9, 0xa3, 0xc9),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xa1, 0xd7, 0x6a),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xde, 0x77, 0xae),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x7f, 0xbc, 0x41),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xde, 0x77, 0xae),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x7f, 0xbc, 0x41),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0x8e, 0x01, 0x52),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xde, 0x77, 0xae),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x7f, 0xbc, 0x41),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0x27, 0x64, 0x19),
    Color::from_rgb(0x8e, 0x01, 0x52),
    Color::from_rgb(0xc5, 0x1b, 0x7d),
    Color::from_rgb(0xde, 0x77, 0xae),
    Color::from_rgb(0xf1, 0xb6, 0xda),
    Color::from_rgb(0xfd, 0xe0, 0xef),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xe6, 0xf5, 0xd0),
    Color::from_rgb(0xb8, 0xe1, 0x86),
    Color::from_rgb(0x7f, 0xbc, 0x41),
    Color::from_rgb(0x4d, 0x92, 0x21),
    Color::from_rgb(0x27, 0x64, 0x19),
];

const PRGn_COLORS: &[Color] = &[
    Color::from_rgb(0xaf, 0x8d, 0xc3),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0x7f, 0xbf, 0x7b),
    Color::from_rgb(0x7b, 0x32, 0x94),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x00, 0x88, 0x37),
    Color::from_rgb(0x7b, 0x32, 0x94),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x00, 0x88, 0x37),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0xaf, 0x8d, 0xc3),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0x7f, 0xbf, 0x7b),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0xaf, 0x8d, 0xc3),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0x7f, 0xbf, 0x7b),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0x99, 0x70, 0xab),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x5a, 0xae, 0x61),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0x99, 0x70, 0xab),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x5a, 0xae, 0x61),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x40, 0x00, 0x4b),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0x99, 0x70, 0xab),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x5a, 0xae, 0x61),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x00, 0x44, 0x1b),
    Color::from_rgb(0x40, 0x00, 0x4b),
    Color::from_rgb(0x76, 0x2a, 0x83),
    Color::from_rgb(0x99, 0x70, 0xab),
    Color::from_rgb(0xc2, 0xa5, 0xcf),
    Color::from_rgb(0xe7, 0xd4, 0xe8),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd9, 0xf0, 0xd3),
    Color::from_rgb(0xa6, 0xdb, 0xa0),
    Color::from_rgb(0x5a, 0xae, 0x61),
    Color::from_rgb(0x1b, 0x78, 0x37),
    Color::from_rgb(0x00, 0x44, 0x1b),
];

const PuOr_COLORS: &[Color] = &[
    Color::from_rgb(0x99, 0x8e, 0xc3),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xf1, 0xa3, 0x40),
    Color::from_rgb(0x5e, 0x3c, 0x99),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe6, 0x61, 0x01),
    Color::from_rgb(0x5e, 0x3c, 0x99),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe6, 0x61, 0x01),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x99, 0x8e, 0xc3),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xf1, 0xa3, 0x40),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x99, 0x8e, 0xc3),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xf1, 0xa3, 0x40),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x80, 0x73, 0xac),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe0, 0x82, 0x14),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x80, 0x73, 0xac),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe0, 0x82, 0x14),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x2d, 0x00, 0x4b),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x80, 0x73, 0xac),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe0, 0x82, 0x14),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x7f, 0x3b, 0x08),
    Color::from_rgb(0x2d, 0x00, 0x4b),
    Color::from_rgb(0x54, 0x27, 0x88),
    Color::from_rgb(0x80, 0x73, 0xac),
    Color::from_rgb(0xb2, 0xab, 0xd2),
    Color::from_rgb(0xd8, 0xda, 0xeb),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xfe, 0xe0, 0xb6),
    Color::from_rgb(0xfd, 0xb8, 0x63),
    Color::from_rgb(0xe0, 0x82, 0x14),
    Color::from_rgb(0xb3, 0x58, 0x06),
    Color::from_rgb(0x7f, 0x3b, 0x08),
];

const RdBu_COLORS: &[Color] = &[
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0x67, 0xa9, 0xcf),
    Color::from_rgb(0xca, 0x00, 0x20),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x05, 0x71, 0xb0),
    Color::from_rgb(0xca, 0x00, 0x20),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x05, 0x71, 0xb0),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x67, 0xa9, 0xcf),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x67, 0xa9, 0xcf),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x43, 0x93, 0xc3),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x43, 0x93, 0xc3),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0x67, 0x00, 0x1f),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x43, 0x93, 0xc3),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0x05, 0x30, 0x61),
    Color::from_rgb(0x67, 0x00, 0x1f),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xf7, 0xf7, 0xf7),
    Color::from_rgb(0xd1, 0xe5, 0xf0),
    Color::from_rgb(0x92, 0xc5, 0xde),
    Color::from_rgb(0x43, 0x93, 0xc3),
    Color::from_rgb(0x21, 0x66, 0xac),
    Color::from_rgb(0x05, 0x30, 0x61),
];

const RdGy_COLORS: &[Color] = &[
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xff, 0xff, 0xff),
    Color::from_rgb(0x99, 0x99, 0x99),
    Color::from_rgb(0xca, 0x00, 0x20),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x40, 0x40, 0x40),
    Color::from_rgb(0xca, 0x00, 0x20),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xff, 0xff, 0xff),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x40, 0x40, 0x40),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0x99, 0x99, 0x99),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xef, 0x8a, 0x62),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xff, 0xff, 0xff),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0x99, 0x99, 0x99),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x87, 0x87, 0x87),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xff, 0xff, 0xff),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x87, 0x87, 0x87),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0x67, 0x00, 0x1f),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x87, 0x87, 0x87),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0x1a, 0x1a, 0x1a),
    Color::from_rgb(0x67, 0x00, 0x1f),
    Color::from_rgb(0xb2, 0x18, 0x2b),
    Color::from_rgb(0xd6, 0x60, 0x4d),
    Color::from_rgb(0xf4, 0xa5, 0x82),
    Color::from_rgb(0xfd, 0xdb, 0xc7),
    Color::from_rgb(0xff, 0xff, 0xff),
    Color::from_rgb(0xe0, 0xe0, 0xe0),
    Color::from_rgb(0xba, 0xba, 0xba),
    Color::from_rgb(0x87, 0x87, 0x87),
    Color::from_rgb(0x4d, 0x4d, 0x4d),
    Color::from_rgb(0x1a, 0x1a, 0x1a),
];

const RdYlBu_COLORS: &[Color] = &[
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0x91, 0xbf, 0xdb),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x2c, 0x7b, 0xb6),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x2c, 0x7b, 0xb6),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0x91, 0xbf, 0xdb),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0x91, 0xbf, 0xdb),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x74, 0xad, 0xd1),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x74, 0xad, 0xd1),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0xa5, 0x00, 0x26),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x74, 0xad, 0xd1),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0x31, 0x36, 0x95),
    Color::from_rgb(0xa5, 0x00, 0x26),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x90),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe0, 0xf3, 0xf8),
    Color::from_rgb(0xab, 0xd9, 0xe9),
    Color::from_rgb(0x74, 0xad, 0xd1),
    Color::from_rgb(0x45, 0x75, 0xb4),
    Color::from_rgb(0x31, 0x36, 0x95),
];

const RdYlGn_COLORS: &[Color] = &[
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0x91, 0xcf, 0x60),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x1a, 0x96, 0x41),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x1a, 0x96, 0x41),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0x91, 0xcf, 0x60),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0x91, 0xcf, 0x60),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x66, 0xbd, 0x63),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x66, 0xbd, 0x63),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0xa5, 0x00, 0x26),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x66, 0xbd, 0x63),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0x00, 0x68, 0x37),
    Color::from_rgb(0xa5, 0x00, 0x26),
    Color::from_rgb(0xd7, 0x30, 0x27),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xd9, 0xef, 0x8b),
    Color::from_rgb(0xa6, 0xd9, 0x6a),
    Color::from_rgb(0x66, 0xbd, 0x63),
    Color::from_rgb(0x1a, 0x98, 0x50),
    Color::from_rgb(0x00, 0x68, 0x37),
];

const Spectral_COLORS: &[Color] = &[
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0x99, 0xd5, 0x94),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x2b, 0x83, 0xba),
    Color::from_rgb(0xd7, 0x19, 0x1c),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x2b, 0x83, 0xba),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0x99, 0xd5, 0x94),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xfc, 0x8d, 0x59),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0x99, 0xd5, 0x94),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x66, 0xc2, 0xa5),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x66, 0xc2, 0xa5),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0x9e, 0x01, 0x42),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x66, 0xc2, 0xa5),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0x5e, 0x4f, 0xa2),
    Color::from_rgb(0x9e, 0x01, 0x42),
    Color::from_rgb(0xd5, 0x3e, 0x4f),
    Color::from_rgb(0xf4, 0x6d, 0x43),
    Color::from_rgb(0xfd, 0xae, 0x61),
    Color::from_rgb(0xfe, 0xe0, 0x8b),
    Color::from_rgb(0xff, 0xff, 0xbf),
    Color::from_rgb(0xe6, 0xf5, 0x98),
    Color::from_rgb(0xab, 0xdd, 0xa4),
    Color::from_rgb(0x66, 0xc2, 0xa5),
    Color::from_rgb(0x32, 0x88, 0xbd),
    Color::from_rgb(0x5e, 0x4f, 0xa2),
];
